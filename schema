-- MySQL Script generated by MySQL Workbench
-- Fri Dec  8 19:22:31 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
SET SQL_SAFE_UPDATES = 0;
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `brand`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `brand` ;

CREATE TABLE IF NOT EXISTS `brand` (
  `brandid` INT NOT NULL,
  `brandname` VARCHAR(45) NULL,
  `country` VARCHAR(100) NULL,
  PRIMARY KEY (`brandid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cartype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cartype` ;

CREATE TABLE IF NOT EXISTS `cartype` (
  `cartypeid` INT NOT NULL,
  `cartype` VARCHAR(45) NULL,
  PRIMARY KEY (`cartypeid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `car`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `car` ;

CREATE TABLE IF NOT EXISTS `car` (
  `carid` INT NOT NULL,
  `brandid` INT NOT NULL,
  `carname` VARCHAR(100) NULL,
  `cartypeid` INT NOT NULL,
  `year` YEAR NULL,
  `power` INT NULL,
  `torque` INT NULL,
  `fuel` VARCHAR(45) NULL,
  `length` VARCHAR(45) NULL,
  `width` VARCHAR(45) NULL,
  `height` VARCHAR(45) NULL,
  `topspeed` INT NULL,
  `weight` INT NULL,
  `cylinder` VARCHAR(45) NULL,
  `mpg` FLOAT(4,2) NULL,
  `msrp` INT NULL,
  `level` FLOAT(4,2) NULL DEFAULT 5,
  PRIMARY KEY (`carid`, `brandid`, `cartypeid`),
  INDEX `fk_car_brand1_idx` (`brandid` ASC),
  INDEX `fk_car_cartype1_idx` (`cartypeid` ASC),
  CONSTRAINT `fk_car_brand1`
    FOREIGN KEY (`brandid`)
    REFERENCES `brand` (`brandid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_car_cartype1`
    FOREIGN KEY (`cartypeid`)
    REFERENCES `cartype` (`cartypeid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dealer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dealer` ;

CREATE TABLE IF NOT EXISTS `dealer` (
  `dealerid` INT NOT NULL,
  `dealername` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `phone` VARCHAR(45) NULL,
  PRIMARY KEY (`dealerid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user` ;

CREATE TABLE IF NOT EXISTS `user` (
  `userid` INT NOT NULL,
  `username` VARCHAR(45) NULL,
  PRIMARY KEY (`userid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `comment` ;

CREATE TABLE IF NOT EXISTS `comment` (
  `commentid` INT NOT NULL AUTO_INCREMENT,
  `commentname` VARCHAR(45) NULL,
  `content` VARCHAR(1000) NULL,
  `cargrading` INT NULL,
  `recommend` TINYINT NULL,
  `user_userid` INT NOT NULL,
  `car_carid` INT NOT NULL,
  PRIMARY KEY (`commentid`, `user_userid`, `car_carid`),
  INDEX `fk_comment_user1_idx` (`user_userid` ASC),
  INDEX `fk_comment_car1_idx` (`car_carid` ASC),
  CONSTRAINT `fk_comment_user1`
    FOREIGN KEY (`user_userid`)
    REFERENCES `user` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comment_car1`
    FOREIGN KEY (`car_carid`)
    REFERENCES `car` (`carid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user_has_car`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user_has_car` ;

CREATE TABLE IF NOT EXISTS `user_has_car` (
  `user_userid` INT NOT NULL,
  `car_carid` INT NOT NULL,
  `purchasetime` YEAR NULL,
  `price` INT NULL,
  PRIMARY KEY (`user_userid`, `car_carid`),
  INDEX `fk_user_has_car_car1_idx` (`car_carid` ASC),
  INDEX `fk_user_has_car_user1_idx` (`user_userid` ASC),
  CONSTRAINT `fk_user_has_car_user1`
    FOREIGN KEY (`user_userid`)
    REFERENCES `user` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_car_car1`
    FOREIGN KEY (`car_carid`)
    REFERENCES `car` (`carid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dealer_has_car`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dealer_has_car` ;

CREATE TABLE IF NOT EXISTS `dealer_has_car` (
  `dealer_dealerid` INT NOT NULL,
  `carid` INT NOT NULL,
  `dealerprice` VARCHAR(45) NULL,
  PRIMARY KEY (`dealer_dealerid`, `carid`),
  INDEX `fk_dealer_has_car_car1_idx` (`carid` ASC),
  INDEX `fk_dealer_has_car_dealer1_idx` (`dealer_dealerid` ASC),
  CONSTRAINT `fk_dealer_has_car_dealer1`
    FOREIGN KEY (`dealer_dealerid`)
    REFERENCES `dealer` (`dealerid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_dealer_has_car_car1`
    FOREIGN KEY (`carid`)
    REFERENCES `car` (`carid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `comlog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `comlog` ;

CREATE TABLE IF NOT EXISTS `comlog` (
  `comlogid` INT NOT NULL AUTO_INCREMENT,
  `commentid` INT NULL,
  `comname` VARCHAR(100) NULL,
  `cont` VARCHAR(1000) NULL,
  `grd` INT NULL,
  `rcm` TINYINT NULL,
  `action` VARCHAR(45) NULL,
  `changedate` DATETIME NULL,
  PRIMARY KEY (`comlogid`))
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `carinfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carinfo` (`brandname` INT, `carname` INT, `cartype` INT, `year` INT, `power` INT, `torque` INT, `fuel` INT, `length` INT, `width` INT, `height` INT, `topspeed` INT, `cylinder` INT, `mpg` INT, `msrp` INT, `level` INT);

-- -----------------------------------------------------
-- Placeholder table for view `dealerinfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dealerinfo` (`dealername` INT, `address` INT, `phone` INT, `carname` INT, `brandname` INT, `dealerprice` INT, `'discount%'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `userinfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `userinfo` (`username` INT, `carname` INT, `brandname` INT, `cartype` INT, `purchasetime` INT);

-- -----------------------------------------------------
-- Placeholder table for view `commentinfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `commentinfo` (`username` INT, `carname` INT, `brandname` INT, `commentname` INT, `content` INT, `cargrading` INT, `recommend` INT);

-- -----------------------------------------------------
-- View `carinfo`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `carinfo` ;
DROP TABLE IF EXISTS `carinfo`;
USE `mydb`;
CREATE  OR REPLACE VIEW carinfo AS
    SELECT 
        brandname,
        carname,
        cartype,
        year,
        power,
        torque,
        fuel,
        length,
        width,
        height,
        topspeed,
        cylinder,
        mpg,
        msrp,
        level
    FROM
        brand b
            LEFT JOIN
        car c ON b.brandid = c.brandid
            LEFT JOIN
        cartype ct ON c.cartypeid = ct.cartypeid
    ORDER BY brandname;

-- -----------------------------------------------------
-- View `dealerinfo`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `dealerinfo` ;
DROP TABLE IF EXISTS `dealerinfo`;
USE `mydb`;
CREATE  OR REPLACE VIEW dealerinfo 
AS
    SELECT 
        dealername,
        address,
        phone,
        carname,
        brandname,
        dealerprice,
        100 * (msrp- dealerprice) / msrp AS 'discount%'
    FROM
        dealer d
            LEFT JOIN
        dealer_has_car dhc ON d.dealerid = dhc.dealer_dealerid
            LEFT JOIN
        car c ON dhc.carid = c.carid
            LEFT JOIN
        brand b ON b.brandid = c.brandid
    ORDER BY dealername;

-- -----------------------------------------------------
-- View `userinfo`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `userinfo` ;
DROP TABLE IF EXISTS `userinfo`;
USE `mydb`;
CREATE  OR REPLACE VIEW userinfo 
AS
    SELECT 
        username, carname, brandname, cartype, purchasetime
    FROM
        user u
            LEFT JOIN
        user_has_car uhc ON u.userid = uhc.user_userid
            LEFT JOIN
        car c ON uhc.car_carid = c.carid
            LEFT JOIN
        brand b ON b.brandid = c.brandid
            LEFT JOIN
        cartype ct ON c.cartypeid = ct.cartypeid
    ORDER BY username;

-- -----------------------------------------------------
-- View `commentinfo`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `commentinfo` ;
DROP TABLE IF EXISTS `commentinfo`;
USE `mydb`;
CREATE  OR REPLACE VIEW commentinfo AS
    SELECT 
        username,
        carname,
        brandname,
        commentname,
        content,
        cargrading,
        recommend
    FROM
        user u
            RIGHT JOIN
        comment com ON u.userid = com.user_userid
            LEFT JOIN
        car c ON com.car_carid = c.carid
            LEFT JOIN
        brand b ON c.brandid = b.brandid
    ORDER BY username;
USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `comment_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`comment_BEFORE_INSERT` BEFORE INSERT ON `comment` FOR EACH ROW
BEGIN
 if new.cargrading<0 or new.cargrading>5 THEN 
 SIGNAL SQLSTATE VALUE '45000'
SET MESSAGE_TEXT = 'Invalid grade!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `comment_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`comment_AFTER_INSERT` AFTER INSERT ON `comment` FOR EACH ROW
BEGIN

insert into comlog 
set commentid=new.commentid,
comname=new.commentname,
cont=new.content,
grd=new.cargrading,
rcm=new.recommend,
action='INSERT',
changedate=now();

UPDATE car 
SET 
    level = (SELECT 
            AVG(cargrading)
        FROM
            comment
        WHERE
            car_carid = new.car_carid
        GROUP BY comment.car_carid)
WHERE
    carid = new.car_carid;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `comment_AFTER_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`comment_AFTER_UPDATE` AFTER UPDATE ON `comment` FOR EACH ROW
BEGIN
insert into comlog 
set commentid=old.commentid,
comname=old.commentname,
cont=old.content,
grd=old.cargrading,
rcm=old.recommend,
action='UPDATE',
changedate=now();

UPDATE car 
SET 
    level = (SELECT 
            AVG(cargrading)
        FROM
            comment
        WHERE
            car_carid = new.car_carid
        GROUP BY comment.car_carid)
WHERE
    carid = new.car_carid;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `comment_BEFORE_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`comment_BEFORE_DELETE` BEFORE DELETE ON `comment` FOR EACH ROW
BEGIN

insert into comlog 
set commentid=old.commentid,
comname=old.commentname,
cont=old.content,
grd=old.cargrading,
rcm=old.recommend,
action='DELETE',
changedate=now();

END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `comment_AFTER_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`comment_AFTER_DELETE` AFTER DELETE ON `comment` FOR EACH ROW
BEGIN
UPDATE car 
SET 
    level = (SELECT 
            AVG(cargrading)
        FROM
            comment
        WHERE
            car_carid = old.car_carid
        GROUP BY comment.car_carid)
WHERE
    carid = old.car_carid;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
